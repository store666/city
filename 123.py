import json

def check_cities_file(path="cities.json"):
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    if not isinstance(data, list):
        print("‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, –Ω–æ –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø:", type(data))
        return

    issues = []
    seen = set()
    for i, city in enumerate(data):
        if not isinstance(city, str):
            issues.append(f"[{i}] ‚ùå –ù–µ —Å—Ç—Ä–æ–∫–∞: {city}")
            continue

        original = city
        normalized = city.strip()

        if original != normalized:
            issues.append(f"[{i}] ‚ö†Ô∏è –õ–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã: '{original}' ‚Üí '{normalized}'")

        if normalized == "":
            issues.append(f"[{i}] ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")

        lower = normalized.lower()
        if lower in seen:
            issues.append(f"[{i}] ‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç: '{normalized}'")
        else:
            seen.add(lower)

    if issues:
        print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(issue)
    else:
        print("‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ: —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤.")

# –ó–∞–ø—É—Å–∫
check_cities_file()
