import os
import json
import unicodedata
import asyncio
from dataclasses import dataclass, field
from typing import Dict, Set, List, Optional, Tuple
from collections import defaultdict
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env ----------
load_dotenv()
token = os.getenv("BOT_TOKEN")
if not token or token.strip() == "":
    raise ValueError(
        "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. "
        "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=–≤–∞—à_—Ä–µ–∞–ª—å–Ω—ã–π_—Ç–æ–∫–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è."
    )

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ ----------
def load_cities(file_path: str = "cities.json") -> List[str]:
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError("–§–∞–π–ª cities.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except json.JSONDecodeError:
        raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ cities.json.")

# ---------- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è ----------
def normalize_text(s: str) -> str:
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ: lowercase, –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤/–ø—Ä–æ–±–µ–ª–æ–≤, —ë->–µ"""
    try:
        s = unicodedata.normalize("NFC", s).strip().lower()
        s = s.replace("—ë", "–µ").replace("-", "").replace(" ", "")
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
        s = ''.join(c for c in s if c.isalpha() or c in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
        return s
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return ""

def build_city_index(cities: List[str]) -> Tuple[Set[str], Dict[str, Set[str]]]:
    all_norm = {normalize_text(c) for c in cities if normalize_text(c)}
    by_first: Dict[str, Set[str]] = defaultdict(set)
    for c in all_norm:
        if c:
            by_first[c[0]].add(c)
    return all_norm, by_first

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
RAW_CITIES = load_cities("cities.json")
CITIES, CITIES_BY_FIRST = build_city_index(RAW_CITIES)

# ---------- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ----------
TAIL_SKIP = {"—å", "—ä", "—ã"}

def last_working_letter(city: str) -> Optional[str]:
    c = normalize_text(city)
    if not c:
        return None
    for ch in reversed(c):
        if ch in TAIL_SKIP:
            continue
        return ch
    return None

@dataclass
class Game:
    players: List[int] = field(default_factory=list)
    usernames: Dict[int, str] = field(default_factory=dict)
    used: Set[str] = field(default_factory=set)
    turn_idx: int = 0
    need_letter: Optional[str] = None
    started: bool = False

    def current_player(self) -> Optional[int]:
        if not self.players:
            return None
        return self.players[self.turn_idx % len(self.players)]

    def next_turn(self):
        self.turn_idx = (self.turn_idx + 1) % len(self.players)

    def add_used(self, city_norm: str):
        self.used.add(city_norm)

def validate_move(game: Game, raw_city: str) -> Tuple[bool, str]:
    city = normalize_text(raw_city)
    if not city or last_working_letter(city) is None:
        return False, "invalid_name"
    if city not in CITIES:
        return False, "not_in_db"
    if city in game.used:
        return False, "already_used"
    if game.need_letter and not city.startswith(game.need_letter):
        return False, "wrong_letter"
    return True, "ok"

def has_moves(game: Game) -> bool:
    if game.need_letter is None:
        return True
    candidates = CITIES_BY_FIRST.get(game.need_letter, set())
    return len(candidates - game.used) > 0

# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ----------
games: Dict[int, Game] = {}
locks: Dict[int, asyncio.Lock] = {}

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üéÆ –ò–≥—Ä–∞ –≤ –≥–æ—Ä–æ–¥–∞\n"
        "–ü—Ä–∞–≤–∏–ª–∞: –ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–∑—ã–≤–∞—é—Ç –≥–æ—Ä–æ–¥–∞. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞ (–∫—Ä–æ–º–µ —å, —ä, —ã). –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–∑–æ–≤—ë—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/join ‚Äî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
        "/status ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n"
        "/restart ‚Äî –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥."
    )
    await update.message.reply_text(help_text)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    async with locks.setdefault(chat_id, asyncio.Lock()):
        if chat_id in games:
            await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join.")
            return
        g = Game(players=[user.id], usernames={user.id: user.username or user.first_name or "–ê–Ω–æ–Ω–∏–º"}, started=False)
        games[chat_id] = g
        locks[chat_id] = asyncio.Lock()  # –°–æ–∑–¥–∞—ë–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —á–∞—Ç–∞
    await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ –ª–æ–±–±–∏. {g.usernames[user.id]} ‚Äî –∏–≥—Ä–æ–∫ 1. –í—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É: /join")

async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    async with locks.get(chat_id, asyncio.Lock()):
        g = games.get(chat_id)
        if not g:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
        if user.id in g.players:
            await update.message.reply_text("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")
            return
        if len(g.players) >= 2:
            await update.message.reply_text("–£–∂–µ –µ—Å—Ç—å 2 –∏–≥—Ä–æ–∫–∞.")
            return
        g.players.append(user.id)
        g.usernames[user.id] = user.username or user.first_name or "–ê–Ω–æ–Ω–∏–º"
        g.started = True
        first = g.usernames[g.players[g.turn_idx]]
    await update.message.reply_text(f"–ò–≥—Ä–æ–∫–∏: {', '.join(g.usernames[p] for p in g.players)}. –ù–∞—á–∏–Ω–∞–µ—Ç {first}. –ù–∞–∑–æ–≤–∏—Ç–µ –ª—é–±–æ–π –≥–æ—Ä–æ–¥.")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    g = games.get(chat_id)
    if not g:
        await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. /start")
        return
    letter = g.need_letter.upper() if g.need_letter else "–ª—é–±–∞—è"
    cur_user = g.usernames.get(g.current_player(), "‚Äî")
    await update.message.reply_text(f"–•–æ–¥–∏—Ç: {cur_user}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(g.used)}. –°–ª–µ–¥—É—é—â–∞—è –±—É–∫–≤–∞: '{letter}'.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text
    user = update.effective_user

    async with locks.get(chat_id, asyncio.Lock()):
        g = games.get(chat_id)
        if not g:
            return
        if not g.started or len(g.players) < 2:
            await update.message.reply_text("–ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞. /join")
            return
        if user.id not in g.players:
            await update.message.reply_text("–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ. /join")
            return
        if user.id != g.current_player():
            await update.message.reply_text(f"–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç {g.usernames[g.current_player()]}.")
            return

        ok, reason = validate_move(g, text)
        city_norm = normalize_text(text)

        if not ok:
            reasons = {
                "not_in_db": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.",
                "already_used": "–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª.",
                "wrong_letter": f"–ù—É–∂–µ–Ω –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É '{g.need_letter.upper()}'.",
                "invalid_name": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
            }
            await update.message.reply_text(reasons.get(reason, "–û—à–∏–±–∫–∞."))
            return

        # –ü—Ä–∏–Ω—è—Ç—å —Ö–æ–¥
        g.add_used(city_norm)
        g.need_letter = last_working_letter(city_norm)
        g.next_turn()
        next_name = g.usernames[g.current_player()]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ö–æ–¥–æ–≤
        if not has_moves(g):
            winner = user
            await update.message.reply_text(
                f"{text.strip().capitalize()} –ø—Ä–∏–Ω—è—Ç. –ë–æ–ª—å—à–µ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ '{g.need_letter.upper()}'. "
                f"–ü–æ–±–µ–¥–∏–ª {g.usernames[winner.id]}!"
            )
            del games[chat_id]
            del locks[chat_id]
            return

    await update.message.reply_text(f"{text.strip().capitalize()} –ø—Ä–∏–Ω—è—Ç! –•–æ–¥ {next_name} –Ω–∞ '{g.need_letter.upper()}'.")

async def cmd_restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    async with locks.get(chat_id, asyncio.Lock()):
        games.pop(chat_id, None)
        locks.pop(chat_id, None)
    await update.message.reply_text("–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.")

# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    try:
        app = ApplicationBuilder().token(token).build()
        app.add_handler(CommandHandler("start", cmd_start))
        app.add_handler(CommandHandler("join", cmd_join))
        app.add_handler(CommandHandler("status", cmd_status))
        app.add_handler(CommandHandler("restart", cmd_restart))
        app.add_handler(CommandHandler("help", cmd_help))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()